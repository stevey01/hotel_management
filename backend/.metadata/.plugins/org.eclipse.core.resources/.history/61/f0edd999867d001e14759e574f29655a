package com.example.reservation.controller;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


import com.example.reservation.Service.ReservationService;
import com.example.reservation.exception.ResourceNotFoundException;
import com.example.reservation.model.Reservation;


import com.example.reservation.model.Room;
import com.example.reservation.room.service.RoomService;
import com.example.staff.controller.StaffController;

import lombok.extern.slf4j.Slf4j;



@Slf4j
@RestController
@RequestMapping("/hms/v4/")
@CrossOrigin(origins="http://localhost:4200")
public class ReservationController {

	@Autowired
	ReservationService reservationService;
	
	@Autowired
	RoomService roomservice;
	
	
	 
	@GetMapping("/reserve")
	public List<Reservation> getAllReservations()
	{

		log.info("Inside the GetallReservation method of Controller");
		 log.info("Retrieving AllReservations Data ");
	 return reservationService.getallreservations();
	}
	@GetMapping("/reserve/{id}")
	public ResponseEntity<Reservation>  getReservationById(@PathVariable Long id)
	{
		 Reservation reserve = reservationService.getreservationbyid(id);
	        return ResponseEntity.ok(reserve);
	}
	@PostMapping("/reserve")
	public ResponseEntity< Reservation>  createReservation(@RequestBody @Valid Reservation reservation)
	{
		 reservationService.createreservation(reservation);
		 log.info("Inside the createReservation() method of controller");
			log.info("Adding Room "+reservation);
		 return ResponseEntity.ok(reservation);
		 
	}
	
	@PutMapping("/reserve/{id}")
	public ResponseEntity<Reservation> updateReservation(@PathVariable Long id,@Valid @RequestBody Reservation reservationdetails)
	{
		
		 reservationService.updatereservation(id, reservationdetails);
		 log.info("Inside the updateReservation() method of controller");
		 log.info("Updating reservation Data by id ");
	        return ResponseEntity.ok(reservationdetails);
		
	}
	@DeleteMapping("/reserve/{id}")
	public ResponseEntity<Map<String, Boolean>> deleteReservation(@PathVariable Long id)  {
	         reservationService.deletereservation(id);
		Map<String, Boolean> response = new HashMap<>();
		response.put("deleted", Boolean.TRUE);
		log.info("Inside the deletereservation() method of controller");
		 log.info("Deleting A reservation successfully ");
		return ResponseEntity.ok(response);
	}


	    
	    @PostMapping("/room")
	    
	    public ResponseEntity<Room> createUser(@RequestBody Room room) throws Exception {
	    	Room g = roomservice.addRoom(room);
	    	  log.info("Inside the createUser() method of controller");
				log.info("Adding Room "+room);
	        return  ResponseEntity.ok(g);
	    }

	    @PutMapping("/room/{id}")
	    public ResponseEntity<Room> updateRoom(@PathVariable Long id, @RequestBody Room room) throws ResourceNotFoundException {
	        roomservice.updateRoom(id, room);
	        log.info("Inside the updateRoom() method of controller");
			 log.info("Updating room Data by id ");
	        return ResponseEntity.ok(room);
	    }
	    
	    @GetMapping("/room")
	    public List<Room> getAllRoom(){

			log.info("Inside the GetallRoom method of Controller");
			 log.info("Retrieving AllRoom Data ");
	        return roomservice.getAllRoom();
	    }
		@GetMapping("/room/{id}")
		public ResponseEntity<Room>  getRoomById(@PathVariable Long id)
		{
			 Room r = roomservice.getroombyid(id);
		        return ResponseEntity.ok(r);
		}
		/*@GetMapping("/room/{code}")
		public ResponseEntity<Room>  getRoomBycode(@PathVariable String code)
		{
			 Room r = roomservice.getroombycode(code);
		        return ResponseEntity.ok(r);
		}*/
	
	    /*@GetMapping("/searchrooms/{CheckIn}/{Checkout}")
		public ResponseEntity<List<Room>> SearchRoom(@PathVariable String CheckIn, @PathVariable String Checkout) throws ResourceNotFoundException, ParseException{
			
			return ResponseEntity.ok(roomservice.searchRooms(CheckIn,Checkout));
		}
	  */
		@DeleteMapping("/room/{id}")
		public ResponseEntity<Map<String, Boolean>> deleteRoom(@PathVariable Long id)  {
		         roomservice.deleteroom(id);
			Map<String, Boolean> response = new HashMap<>();
			response.put("deleted", Boolean.TRUE);
			log.info("Inside the deleteRoom() method of controller");
			 log.info("Deleting A room successfully ");
			return ResponseEntity.ok(response);
		}
		@GetMapping("/search")
	    public List<Room> searchRooms(
	        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate checkin_date,
	        @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate checkout_date) {
			log.info("Inside the searchRoom() method of controller");
			return roomservice.searchAvailableRooms(checkin_date, checkout_date);
	    }
	
	
}
